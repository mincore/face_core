// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fastore.proto

#ifndef PROTOBUF_fastore_2eproto__INCLUDED
#define PROTOBUF_fastore_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fastore {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fastore_2eproto();
void protobuf_AssignDesc_fastore_2eproto();
void protobuf_ShutdownFile_fastore_2eproto();

class FaceAttr;
class TagAttr;

// ===================================================================

class FaceAttr : public ::google::protobuf::Message {
 public:
  FaceAttr();
  virtual ~FaceAttr();

  FaceAttr(const FaceAttr& from);

  inline FaceAttr& operator=(const FaceAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceAttr& default_instance();

  void Swap(FaceAttr* other);

  // implements Message ----------------------------------------------

  FaceAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceAttr& from);
  void MergeFrom(const FaceAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FaceID = 1;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceIDFieldNumber = 1;
  inline ::google::protobuf::uint64 faceid() const;
  inline void set_faceid(::google::protobuf::uint64 value);

  // optional bytes Feature = 2;
  inline bool has_feature() const;
  inline void clear_feature();
  static const int kFeatureFieldNumber = 2;
  inline const ::std::string& feature() const;
  inline void set_feature(const ::std::string& value);
  inline void set_feature(const char* value);
  inline void set_feature(const void* value, size_t size);
  inline ::std::string* mutable_feature();
  inline ::std::string* release_feature();
  inline void set_allocated_feature(::std::string* feature);

  // repeated uint32 TagIDs = 3;
  inline int tagids_size() const;
  inline void clear_tagids();
  static const int kTagIDsFieldNumber = 3;
  inline ::google::protobuf::uint32 tagids(int index) const;
  inline void set_tagids(int index, ::google::protobuf::uint32 value);
  inline void add_tagids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tagids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tagids();

  // optional uint32 Flags = 4;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 4;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional string url = 5;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 5;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:fastore.FaceAttr)
 private:
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_feature();
  inline void clear_has_feature();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 faceid_;
  ::std::string* feature_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tagids_;
  ::std::string* url_;
  ::google::protobuf::uint32 flags_;
  friend void  protobuf_AddDesc_fastore_2eproto();
  friend void protobuf_AssignDesc_fastore_2eproto();
  friend void protobuf_ShutdownFile_fastore_2eproto();

  void InitAsDefaultInstance();
  static FaceAttr* default_instance_;
};
// -------------------------------------------------------------------

class TagAttr : public ::google::protobuf::Message {
 public:
  TagAttr();
  virtual ~TagAttr();

  TagAttr(const TagAttr& from);

  inline TagAttr& operator=(const TagAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TagAttr& default_instance();

  void Swap(TagAttr* other);

  // implements Message ----------------------------------------------

  TagAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TagAttr& from);
  void MergeFrom(const TagAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TagID = 1;
  inline bool has_tagid() const;
  inline void clear_tagid();
  static const int kTagIDFieldNumber = 1;
  inline ::google::protobuf::uint32 tagid() const;
  inline void set_tagid(::google::protobuf::uint32 value);

  // optional uint32 Flags = 2;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 2;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fastore.TagAttr)
 private:
  inline void set_has_tagid();
  inline void clear_has_tagid();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tagid_;
  ::google::protobuf::uint32 flags_;
  friend void  protobuf_AddDesc_fastore_2eproto();
  friend void protobuf_AssignDesc_fastore_2eproto();
  friend void protobuf_ShutdownFile_fastore_2eproto();

  void InitAsDefaultInstance();
  static TagAttr* default_instance_;
};
// ===================================================================


// ===================================================================

// FaceAttr

// optional uint64 FaceID = 1;
inline bool FaceAttr::has_faceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaceAttr::set_has_faceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaceAttr::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaceAttr::clear_faceid() {
  faceid_ = GOOGLE_ULONGLONG(0);
  clear_has_faceid();
}
inline ::google::protobuf::uint64 FaceAttr::faceid() const {
  // @@protoc_insertion_point(field_get:fastore.FaceAttr.FaceID)
  return faceid_;
}
inline void FaceAttr::set_faceid(::google::protobuf::uint64 value) {
  set_has_faceid();
  faceid_ = value;
  // @@protoc_insertion_point(field_set:fastore.FaceAttr.FaceID)
}

// optional bytes Feature = 2;
inline bool FaceAttr::has_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaceAttr::set_has_feature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FaceAttr::clear_has_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FaceAttr::clear_feature() {
  if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_->clear();
  }
  clear_has_feature();
}
inline const ::std::string& FaceAttr::feature() const {
  // @@protoc_insertion_point(field_get:fastore.FaceAttr.Feature)
  return *feature_;
}
inline void FaceAttr::set_feature(const ::std::string& value) {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_ = new ::std::string;
  }
  feature_->assign(value);
  // @@protoc_insertion_point(field_set:fastore.FaceAttr.Feature)
}
inline void FaceAttr::set_feature(const char* value) {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_ = new ::std::string;
  }
  feature_->assign(value);
  // @@protoc_insertion_point(field_set_char:fastore.FaceAttr.Feature)
}
inline void FaceAttr::set_feature(const void* value, size_t size) {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_ = new ::std::string;
  }
  feature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fastore.FaceAttr.Feature)
}
inline ::std::string* FaceAttr::mutable_feature() {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    feature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fastore.FaceAttr.Feature)
  return feature_;
}
inline ::std::string* FaceAttr::release_feature() {
  clear_has_feature();
  if (feature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = feature_;
    feature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FaceAttr::set_allocated_feature(::std::string* feature) {
  if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature_;
  }
  if (feature) {
    set_has_feature();
    feature_ = feature;
  } else {
    clear_has_feature();
    feature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fastore.FaceAttr.Feature)
}

// repeated uint32 TagIDs = 3;
inline int FaceAttr::tagids_size() const {
  return tagids_.size();
}
inline void FaceAttr::clear_tagids() {
  tagids_.Clear();
}
inline ::google::protobuf::uint32 FaceAttr::tagids(int index) const {
  // @@protoc_insertion_point(field_get:fastore.FaceAttr.TagIDs)
  return tagids_.Get(index);
}
inline void FaceAttr::set_tagids(int index, ::google::protobuf::uint32 value) {
  tagids_.Set(index, value);
  // @@protoc_insertion_point(field_set:fastore.FaceAttr.TagIDs)
}
inline void FaceAttr::add_tagids(::google::protobuf::uint32 value) {
  tagids_.Add(value);
  // @@protoc_insertion_point(field_add:fastore.FaceAttr.TagIDs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FaceAttr::tagids() const {
  // @@protoc_insertion_point(field_list:fastore.FaceAttr.TagIDs)
  return tagids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FaceAttr::mutable_tagids() {
  // @@protoc_insertion_point(field_mutable_list:fastore.FaceAttr.TagIDs)
  return &tagids_;
}

// optional uint32 Flags = 4;
inline bool FaceAttr::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaceAttr::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FaceAttr::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FaceAttr::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 FaceAttr::flags() const {
  // @@protoc_insertion_point(field_get:fastore.FaceAttr.Flags)
  return flags_;
}
inline void FaceAttr::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:fastore.FaceAttr.Flags)
}

// optional string url = 5;
inline bool FaceAttr::has_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FaceAttr::set_has_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FaceAttr::clear_has_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FaceAttr::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& FaceAttr::url() const {
  // @@protoc_insertion_point(field_get:fastore.FaceAttr.url)
  return *url_;
}
inline void FaceAttr::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:fastore.FaceAttr.url)
}
inline void FaceAttr::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:fastore.FaceAttr.url)
}
inline void FaceAttr::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fastore.FaceAttr.url)
}
inline ::std::string* FaceAttr::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fastore.FaceAttr.url)
  return url_;
}
inline ::std::string* FaceAttr::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FaceAttr::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fastore.FaceAttr.url)
}

// -------------------------------------------------------------------

// TagAttr

// optional uint32 TagID = 1;
inline bool TagAttr::has_tagid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TagAttr::set_has_tagid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TagAttr::clear_has_tagid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TagAttr::clear_tagid() {
  tagid_ = 0u;
  clear_has_tagid();
}
inline ::google::protobuf::uint32 TagAttr::tagid() const {
  // @@protoc_insertion_point(field_get:fastore.TagAttr.TagID)
  return tagid_;
}
inline void TagAttr::set_tagid(::google::protobuf::uint32 value) {
  set_has_tagid();
  tagid_ = value;
  // @@protoc_insertion_point(field_set:fastore.TagAttr.TagID)
}

// optional uint32 Flags = 2;
inline bool TagAttr::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TagAttr::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TagAttr::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TagAttr::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 TagAttr::flags() const {
  // @@protoc_insertion_point(field_get:fastore.TagAttr.Flags)
  return flags_;
}
inline void TagAttr::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:fastore.TagAttr.Flags)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fastore

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fastore_2eproto__INCLUDED
