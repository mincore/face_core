// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fastore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fastore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fastore {

namespace {

const ::google::protobuf::Descriptor* FaceAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagAttr_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fastore_2eproto() {
  protobuf_AddDesc_fastore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fastore.proto");
  GOOGLE_CHECK(file != NULL);
  FaceAttr_descriptor_ = file->message_type(0);
  static const int FaceAttr_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttr, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttr, feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttr, tagids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttr, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttr, url_),
  };
  FaceAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceAttr_descriptor_,
      FaceAttr::default_instance_,
      FaceAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceAttr));
  TagAttr_descriptor_ = file->message_type(1);
  static const int TagAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAttr, tagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAttr, flags_),
  };
  TagAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TagAttr_descriptor_,
      TagAttr::default_instance_,
      TagAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TagAttr));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fastore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceAttr_descriptor_, &FaceAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TagAttr_descriptor_, &TagAttr::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fastore_2eproto() {
  delete FaceAttr::default_instance_;
  delete FaceAttr_reflection_;
  delete TagAttr::default_instance_;
  delete TagAttr_reflection_;
}

void protobuf_AddDesc_fastore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rfastore.proto\022\007fastore\"W\n\010FaceAttr\022\016\n\006"
    "FaceID\030\001 \001(\004\022\017\n\007Feature\030\002 \001(\014\022\016\n\006TagIDs\030"
    "\003 \003(\r\022\r\n\005Flags\030\004 \001(\r\022\013\n\003url\030\005 \001(\t\"\'\n\007Tag"
    "Attr\022\r\n\005TagID\030\001 \001(\r\022\r\n\005Flags\030\002 \001(\r", 154);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fastore.proto", &protobuf_RegisterTypes);
  FaceAttr::default_instance_ = new FaceAttr();
  TagAttr::default_instance_ = new TagAttr();
  FaceAttr::default_instance_->InitAsDefaultInstance();
  TagAttr::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fastore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fastore_2eproto {
  StaticDescriptorInitializer_fastore_2eproto() {
    protobuf_AddDesc_fastore_2eproto();
  }
} static_descriptor_initializer_fastore_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FaceAttr::kFaceIDFieldNumber;
const int FaceAttr::kFeatureFieldNumber;
const int FaceAttr::kTagIDsFieldNumber;
const int FaceAttr::kFlagsFieldNumber;
const int FaceAttr::kUrlFieldNumber;
#endif  // !_MSC_VER

FaceAttr::FaceAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fastore.FaceAttr)
}

void FaceAttr::InitAsDefaultInstance() {
}

FaceAttr::FaceAttr(const FaceAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fastore.FaceAttr)
}

void FaceAttr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  faceid_ = GOOGLE_ULONGLONG(0);
  feature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceAttr::~FaceAttr() {
  // @@protoc_insertion_point(destructor:fastore.FaceAttr)
  SharedDtor();
}

void FaceAttr::SharedDtor() {
  if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void FaceAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceAttr_descriptor_;
}

const FaceAttr& FaceAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fastore_2eproto();
  return *default_instance_;
}

FaceAttr* FaceAttr::default_instance_ = NULL;

FaceAttr* FaceAttr::New() const {
  return new FaceAttr;
}

void FaceAttr::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    faceid_ = GOOGLE_ULONGLONG(0);
    if (has_feature()) {
      if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        feature_->clear();
      }
    }
    flags_ = 0u;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  tagids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fastore.FaceAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FaceID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Feature;
        break;
      }

      // optional bytes Feature = 2;
      case 2: {
        if (tag == 18) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TagIDs;
        break;
      }

      // repeated uint32 TagIDs = 3;
      case 3: {
        if (tag == 24) {
         parse_TagIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_tagids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tagids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TagIDs;
        if (input->ExpectTag(32)) goto parse_Flags;
        break;
      }

      // optional uint32 Flags = 4;
      case 4: {
        if (tag == 32) {
         parse_Flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }

      // optional string url = 5;
      case 5: {
        if (tag == 42) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fastore.FaceAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fastore.FaceAttr)
  return false;
#undef DO_
}

void FaceAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fastore.FaceAttr)
  // optional uint64 FaceID = 1;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->faceid(), output);
  }

  // optional bytes Feature = 2;
  if (has_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->feature(), output);
  }

  // repeated uint32 TagIDs = 3;
  for (int i = 0; i < this->tagids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->tagids(i), output);
  }

  // optional uint32 Flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fastore.FaceAttr)
}

::google::protobuf::uint8* FaceAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fastore.FaceAttr)
  // optional uint64 FaceID = 1;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->faceid(), target);
  }

  // optional bytes Feature = 2;
  if (has_feature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->feature(), target);
  }

  // repeated uint32 TagIDs = 3;
  for (int i = 0; i < this->tagids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->tagids(i), target);
  }

  // optional uint32 Flags = 4;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flags(), target);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fastore.FaceAttr)
  return target;
}

int FaceAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FaceID = 1;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->faceid());
    }

    // optional bytes Feature = 2;
    if (has_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->feature());
    }

    // optional uint32 Flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  // repeated uint32 TagIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->tagids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tagids(i));
    }
    total_size += 1 * this->tagids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceAttr::MergeFrom(const FaceAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  tagids_.MergeFrom(from.tagids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_feature()) {
      set_feature(from.feature());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceAttr::CopyFrom(const FaceAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceAttr::IsInitialized() const {

  return true;
}

void FaceAttr::Swap(FaceAttr* other) {
  if (other != this) {
    std::swap(faceid_, other->faceid_);
    std::swap(feature_, other->feature_);
    tagids_.Swap(&other->tagids_);
    std::swap(flags_, other->flags_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceAttr_descriptor_;
  metadata.reflection = FaceAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TagAttr::kTagIDFieldNumber;
const int TagAttr::kFlagsFieldNumber;
#endif  // !_MSC_VER

TagAttr::TagAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fastore.TagAttr)
}

void TagAttr::InitAsDefaultInstance() {
}

TagAttr::TagAttr(const TagAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fastore.TagAttr)
}

void TagAttr::SharedCtor() {
  _cached_size_ = 0;
  tagid_ = 0u;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagAttr::~TagAttr() {
  // @@protoc_insertion_point(destructor:fastore.TagAttr)
  SharedDtor();
}

void TagAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TagAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagAttr_descriptor_;
}

const TagAttr& TagAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fastore_2eproto();
  return *default_instance_;
}

TagAttr* TagAttr::default_instance_ = NULL;

TagAttr* TagAttr::New() const {
  return new TagAttr;
}

void TagAttr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TagAttr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tagid_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TagAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fastore.TagAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TagID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tagid_)));
          set_has_tagid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Flags;
        break;
      }

      // optional uint32 Flags = 2;
      case 2: {
        if (tag == 16) {
         parse_Flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fastore.TagAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fastore.TagAttr)
  return false;
#undef DO_
}

void TagAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fastore.TagAttr)
  // optional uint32 TagID = 1;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tagid(), output);
  }

  // optional uint32 Flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fastore.TagAttr)
}

::google::protobuf::uint8* TagAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fastore.TagAttr)
  // optional uint32 TagID = 1;
  if (has_tagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tagid(), target);
  }

  // optional uint32 Flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fastore.TagAttr)
  return target;
}

int TagAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TagID = 1;
    if (has_tagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tagid());
    }

    // optional uint32 Flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TagAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TagAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagAttr::MergeFrom(const TagAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tagid()) {
      set_tagid(from.tagid());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TagAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagAttr::CopyFrom(const TagAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagAttr::IsInitialized() const {

  return true;
}

void TagAttr::Swap(TagAttr* other) {
  if (other != this) {
    std::swap(tagid_, other->tagid_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TagAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagAttr_descriptor_;
  metadata.reflection = TagAttr_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fastore

// @@protoc_insertion_point(global_scope)
