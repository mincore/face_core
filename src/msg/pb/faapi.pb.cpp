// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faapi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "faapi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace faapi {

namespace {

const ::google::protobuf::Descriptor* Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Img_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Img_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtractResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtractResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtractReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtractReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtractResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtractResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompareReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompareReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompareResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompareResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTagsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTagsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTagSizeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTagSizeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTagSizeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTagSizeResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_faapi_2eproto() {
  protobuf_AddDesc_faapi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "faapi.proto");
  GOOGLE_CHECK(file != NULL);
  Rect_descriptor_ = file->message_type(0);
  static const int Rect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, bottom_),
  };
  Rect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rect_descriptor_,
      Rect::default_instance_,
      Rect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rect));
  Img_descriptor_ = file->message_type(1);
  static const int Img_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, israw_),
  };
  Img_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Img_descriptor_,
      Img::default_instance_,
      Img_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Img, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Img));
  DetectResult_descriptor_ = file->message_type(2);
  static const int DetectResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResult, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResult, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResult, faceinfo_),
  };
  DetectResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectResult_descriptor_,
      DetectResult::default_instance_,
      DetectResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectResult));
  ExtractResult_descriptor_ = file->message_type(3);
  static const int ExtractResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractResult, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractResult, feature_),
  };
  ExtractResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtractResult_descriptor_,
      ExtractResult::default_instance_,
      ExtractResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtractResult));
  SearchResult_descriptor_ = file->message_type(4);
  static const int SearchResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, tagname_),
  };
  SearchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchResult_descriptor_,
      SearchResult::default_instance_,
      SearchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchResult));
  DetectReq_descriptor_ = file->message_type(5);
  static const int DetectReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectReq, img_),
  };
  DetectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectReq_descriptor_,
      DetectReq::default_instance_,
      DetectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectReq));
  DetectResp_descriptor_ = file->message_type(6);
  static const int DetectResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResp, results_),
  };
  DetectResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectResp_descriptor_,
      DetectResp::default_instance_,
      DetectResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectResp));
  ExtractReq_descriptor_ = file->message_type(7);
  static const int ExtractReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractReq, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractReq, faceinfo_),
  };
  ExtractReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtractReq_descriptor_,
      ExtractReq::default_instance_,
      ExtractReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtractReq));
  ExtractResp_descriptor_ = file->message_type(8);
  static const int ExtractResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractResp, result_),
  };
  ExtractResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtractResp_descriptor_,
      ExtractResp::default_instance_,
      ExtractResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtractResp));
  CompareReq_descriptor_ = file->message_type(9);
  static const int CompareReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareReq, feature1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareReq, feature2_),
  };
  CompareReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompareReq_descriptor_,
      CompareReq::default_instance_,
      CompareReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompareReq));
  CompareResp_descriptor_ = file->message_type(10);
  static const int CompareResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareResp, score_),
  };
  CompareResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompareResp_descriptor_,
      CompareResp::default_instance_,
      CompareResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompareResp));
  InsertReq_descriptor_ = file->message_type(11);
  static const int InsertReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertReq, tagname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertReq, feature_),
  };
  InsertReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertReq_descriptor_,
      InsertReq::default_instance_,
      InsertReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertReq));
  InsertResp_descriptor_ = file->message_type(12);
  static const int InsertResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertResp, faceid_),
  };
  InsertResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertResp_descriptor_,
      InsertResp::default_instance_,
      InsertResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertResp));
  DeleteReq_descriptor_ = file->message_type(13);
  static const int DeleteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteReq, tagname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteReq, faceid_),
  };
  DeleteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteReq_descriptor_,
      DeleteReq::default_instance_,
      DeleteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteReq));
  SearchReq_descriptor_ = file->message_type(14);
  static const int SearchReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReq, feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReq, tagnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReq, maxcount_),
  };
  SearchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchReq_descriptor_,
      SearchReq::default_instance_,
      SearchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchReq));
  SearchResp_descriptor_ = file->message_type(15);
  static const int SearchResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResp, results_),
  };
  SearchResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchResp_descriptor_,
      SearchResp::default_instance_,
      SearchResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchResp));
  ListTagsResp_descriptor_ = file->message_type(16);
  static const int ListTagsResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTagsResp, tagnames_),
  };
  ListTagsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListTagsResp_descriptor_,
      ListTagsResp::default_instance_,
      ListTagsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTagsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTagsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListTagsResp));
  GetTagSizeReq_descriptor_ = file->message_type(17);
  static const int GetTagSizeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagSizeReq, tagname_),
  };
  GetTagSizeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTagSizeReq_descriptor_,
      GetTagSizeReq::default_instance_,
      GetTagSizeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagSizeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagSizeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTagSizeReq));
  GetTagSizeResp_descriptor_ = file->message_type(18);
  static const int GetTagSizeResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagSizeResp, size_),
  };
  GetTagSizeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTagSizeResp_descriptor_,
      GetTagSizeResp::default_instance_,
      GetTagSizeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagSizeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagSizeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTagSizeResp));
  MSG_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_faapi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rect_descriptor_, &Rect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Img_descriptor_, &Img::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectResult_descriptor_, &DetectResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtractResult_descriptor_, &ExtractResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchResult_descriptor_, &SearchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectReq_descriptor_, &DetectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectResp_descriptor_, &DetectResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtractReq_descriptor_, &ExtractReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtractResp_descriptor_, &ExtractResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompareReq_descriptor_, &CompareReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompareResp_descriptor_, &CompareResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertReq_descriptor_, &InsertReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertResp_descriptor_, &InsertResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteReq_descriptor_, &DeleteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchReq_descriptor_, &SearchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchResp_descriptor_, &SearchResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListTagsResp_descriptor_, &ListTagsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTagSizeReq_descriptor_, &GetTagSizeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTagSizeResp_descriptor_, &GetTagSizeResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_faapi_2eproto() {
  delete Rect::default_instance_;
  delete Rect_reflection_;
  delete Img::default_instance_;
  delete Img_reflection_;
  delete DetectResult::default_instance_;
  delete DetectResult_reflection_;
  delete ExtractResult::default_instance_;
  delete ExtractResult_reflection_;
  delete SearchResult::default_instance_;
  delete SearchResult_reflection_;
  delete DetectReq::default_instance_;
  delete DetectReq_reflection_;
  delete DetectResp::default_instance_;
  delete DetectResp_reflection_;
  delete ExtractReq::default_instance_;
  delete ExtractReq_reflection_;
  delete ExtractResp::default_instance_;
  delete ExtractResp_reflection_;
  delete CompareReq::default_instance_;
  delete CompareReq_reflection_;
  delete CompareResp::default_instance_;
  delete CompareResp_reflection_;
  delete InsertReq::default_instance_;
  delete InsertReq_reflection_;
  delete InsertResp::default_instance_;
  delete InsertResp_reflection_;
  delete DeleteReq::default_instance_;
  delete DeleteReq_reflection_;
  delete SearchReq::default_instance_;
  delete SearchReq_reflection_;
  delete SearchResp::default_instance_;
  delete SearchResp_reflection_;
  delete ListTagsResp::default_instance_;
  delete ListTagsResp_reflection_;
  delete GetTagSizeReq::default_instance_;
  delete GetTagSizeReq_reflection_;
  delete GetTagSizeResp::default_instance_;
  delete GetTagSizeResp_reflection_;
}

void protobuf_AddDesc_faapi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013faapi.proto\022\005faapi\"@\n\004Rect\022\014\n\004left\030\001 \001"
    "(\005\022\013\n\003top\030\002 \001(\005\022\r\n\005right\030\003 \001(\005\022\016\n\006bottom"
    "\030\004 \001(\005\"@\n\003Img\022\013\n\003buf\030\001 \001(\014\022\r\n\005width\030\002 \001("
    "\005\022\016\n\006height\030\003 \001(\005\022\r\n\005isRaw\030\004 \001(\010\"O\n\014Dete"
    "ctResult\022\022\n\nconfidence\030\001 \001(\002\022\031\n\004rect\030\002 \001"
    "(\0132\013.faapi.Rect\022\020\n\010faceInfo\030\003 \001(\014\";\n\rExt"
    "ractResult\022\031\n\004rect\030\001 \001(\0132\013.faapi.Rect\022\017\n"
    "\007feature\030\002 \001(\014\">\n\014SearchResult\022\016\n\006faceID"
    "\030\001 \001(\004\022\r\n\005score\030\002 \001(\002\022\017\n\007tagName\030\003 \001(\t\"$"
    "\n\tDetectReq\022\027\n\003img\030\001 \001(\0132\n.faapi.Img\"2\n\n"
    "DetectResp\022$\n\007results\030\001 \003(\0132\023.faapi.Dete"
    "ctResult\"7\n\nExtractReq\022\027\n\003img\030\001 \001(\0132\n.fa"
    "api.Img\022\020\n\010faceInfo\030\002 \001(\014\"3\n\013ExtractResp"
    "\022$\n\006result\030\001 \001(\0132\024.faapi.ExtractResult\"0"
    "\n\nCompareReq\022\020\n\010feature1\030\001 \001(\014\022\020\n\010featur"
    "e2\030\002 \001(\014\"\034\n\013CompareResp\022\r\n\005score\030\001 \001(\002\"-"
    "\n\tInsertReq\022\017\n\007tagName\030\001 \001(\t\022\017\n\007feature\030"
    "\002 \001(\014\"\034\n\nInsertResp\022\016\n\006faceID\030\001 \001(\004\",\n\tD"
    "eleteReq\022\017\n\007tagName\030\001 \001(\t\022\016\n\006faceID\030\002 \001("
    "\004\"@\n\tSearchReq\022\017\n\007feature\030\001 \001(\014\022\020\n\010tagNa"
    "mes\030\002 \003(\t\022\020\n\010maxCount\030\003 \001(\005\"2\n\nSearchRes"
    "p\022$\n\007results\030\001 \003(\0132\023.faapi.SearchResult\""
    " \n\014ListTagsResp\022\020\n\010tagNames\030\001 \003(\t\" \n\rGet"
    "TagSizeReq\022\017\n\007tagName\030\001 \001(\t\"\036\n\016GetTagSiz"
    "eResp\022\014\n\004size\030\001 \001(\005*\224\003\n\003MSG\022\022\n\016MSG_DETEC"
    "T_REQ\020\000\022\023\n\017MSG_DETECT_RESP\020\001\022\023\n\017MSG_EXTR"
    "ACT_REQ\020\002\022\024\n\020MSG_EXTRACT_RESP\020\003\022\023\n\017MSG_C"
    "OMPARE_REQ\020\004\022\024\n\020MSG_COMPARE_RESP\020\005\022\022\n\016MS"
    "G_INSERT_REQ\020\006\022\023\n\017MSG_INSERT_RESP\020\007\022\022\n\016M"
    "SG_DELETE_REQ\020\010\022\023\n\017MSG_DELETE_RESP\020\t\022\022\n\016"
    "MSG_SEARCH_REQ\020\n\022\023\n\017MSG_SEARCH_RESP\020\013\022\026\n"
    "\022MSG_DELETE_TAG_REQ\020\014\022\027\n\023MSG_DELETE_TAG_"
    "RESP\020\r\022\025\n\021MSG_LIST_TAGS_REQ\020\016\022\026\n\022MSG_LIS"
    "T_TAGS_RESP\020\017\022\030\n\024MSG_GET_TAG_SIZE_REQ\020\020\022"
    "\031\n\025MSG_GET_TAG_SIZE_RESP\020\021", 1386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "faapi.proto", &protobuf_RegisterTypes);
  Rect::default_instance_ = new Rect();
  Img::default_instance_ = new Img();
  DetectResult::default_instance_ = new DetectResult();
  ExtractResult::default_instance_ = new ExtractResult();
  SearchResult::default_instance_ = new SearchResult();
  DetectReq::default_instance_ = new DetectReq();
  DetectResp::default_instance_ = new DetectResp();
  ExtractReq::default_instance_ = new ExtractReq();
  ExtractResp::default_instance_ = new ExtractResp();
  CompareReq::default_instance_ = new CompareReq();
  CompareResp::default_instance_ = new CompareResp();
  InsertReq::default_instance_ = new InsertReq();
  InsertResp::default_instance_ = new InsertResp();
  DeleteReq::default_instance_ = new DeleteReq();
  SearchReq::default_instance_ = new SearchReq();
  SearchResp::default_instance_ = new SearchResp();
  ListTagsResp::default_instance_ = new ListTagsResp();
  GetTagSizeReq::default_instance_ = new GetTagSizeReq();
  GetTagSizeResp::default_instance_ = new GetTagSizeResp();
  Rect::default_instance_->InitAsDefaultInstance();
  Img::default_instance_->InitAsDefaultInstance();
  DetectResult::default_instance_->InitAsDefaultInstance();
  ExtractResult::default_instance_->InitAsDefaultInstance();
  SearchResult::default_instance_->InitAsDefaultInstance();
  DetectReq::default_instance_->InitAsDefaultInstance();
  DetectResp::default_instance_->InitAsDefaultInstance();
  ExtractReq::default_instance_->InitAsDefaultInstance();
  ExtractResp::default_instance_->InitAsDefaultInstance();
  CompareReq::default_instance_->InitAsDefaultInstance();
  CompareResp::default_instance_->InitAsDefaultInstance();
  InsertReq::default_instance_->InitAsDefaultInstance();
  InsertResp::default_instance_->InitAsDefaultInstance();
  DeleteReq::default_instance_->InitAsDefaultInstance();
  SearchReq::default_instance_->InitAsDefaultInstance();
  SearchResp::default_instance_->InitAsDefaultInstance();
  ListTagsResp::default_instance_->InitAsDefaultInstance();
  GetTagSizeReq::default_instance_->InitAsDefaultInstance();
  GetTagSizeResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_faapi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_faapi_2eproto {
  StaticDescriptorInitializer_faapi_2eproto() {
    protobuf_AddDesc_faapi_2eproto();
  }
} static_descriptor_initializer_faapi_2eproto_;
const ::google::protobuf::EnumDescriptor* MSG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_descriptor_;
}
bool MSG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Rect::kLeftFieldNumber;
const int Rect::kTopFieldNumber;
const int Rect::kRightFieldNumber;
const int Rect::kBottomFieldNumber;
#endif  // !_MSC_VER

Rect::Rect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.Rect)
}

void Rect::InitAsDefaultInstance() {
}

Rect::Rect(const Rect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.Rect)
}

void Rect::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  top_ = 0;
  right_ = 0;
  bottom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:faapi.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect_descriptor_;
}

const Rect& Rect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

Rect* Rect::default_instance_ = NULL;

Rect* Rect::New() const {
  return new Rect;
}

void Rect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Rect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(left_, bottom_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top;
        break;
      }

      // optional int32 top = 2;
      case 2: {
        if (tag == 16) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_right;
        break;
      }

      // optional int32 right = 3;
      case 3: {
        if (tag == 24) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }

      // optional int32 bottom = 4;
      case 4: {
        if (tag == 32) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.Rect)
  // optional int32 left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left(), output);
  }

  // optional int32 top = 2;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top(), output);
  }

  // optional int32 right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right(), output);
  }

  // optional int32 bottom = 4;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bottom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.Rect)
}

::google::protobuf::uint8* Rect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.Rect)
  // optional int32 left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left(), target);
  }

  // optional int32 top = 2;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top(), target);
  }

  // optional int32 right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->right(), target);
  }

  // optional int32 bottom = 4;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bottom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.Rect)
  return target;
}

int Rect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

    // optional int32 top = 2;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

    // optional int32 right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // optional int32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {

  return true;
}

void Rect::Swap(Rect* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(top_, other->top_);
    std::swap(right_, other->right_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect_descriptor_;
  metadata.reflection = Rect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Img::kBufFieldNumber;
const int Img::kWidthFieldNumber;
const int Img::kHeightFieldNumber;
const int Img::kIsRawFieldNumber;
#endif  // !_MSC_VER

Img::Img()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.Img)
}

void Img::InitAsDefaultInstance() {
}

Img::Img(const Img& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.Img)
}

void Img::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  israw_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Img::~Img() {
  // @@protoc_insertion_point(destructor:faapi.Img)
  SharedDtor();
}

void Img::SharedDtor() {
  if (buf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buf_;
  }
  if (this != default_instance_) {
  }
}

void Img::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Img::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Img_descriptor_;
}

const Img& Img::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

Img* Img::default_instance_ = NULL;

Img* Img::New() const {
  return new Img;
}

void Img::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Img*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(width_, israw_);
    if (has_buf()) {
      if (buf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buf_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Img::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.Img)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes buf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isRaw;
        break;
      }

      // optional bool isRaw = 4;
      case 4: {
        if (tag == 32) {
         parse_isRaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &israw_)));
          set_has_israw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.Img)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.Img)
  return false;
#undef DO_
}

void Img::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.Img)
  // optional bytes buf = 1;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->buf(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional bool isRaw = 4;
  if (has_israw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->israw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.Img)
}

::google::protobuf::uint8* Img::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.Img)
  // optional bytes buf = 1;
  if (has_buf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->buf(), target);
  }

  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional bool isRaw = 4;
  if (has_israw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->israw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.Img)
  return target;
}

int Img::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes buf = 1;
    if (has_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buf());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional bool isRaw = 4;
    if (has_israw()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Img::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Img* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Img*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Img::MergeFrom(const Img& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buf()) {
      set_buf(from.buf());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_israw()) {
      set_israw(from.israw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Img::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Img::CopyFrom(const Img& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Img::IsInitialized() const {

  return true;
}

void Img::Swap(Img* other) {
  if (other != this) {
    std::swap(buf_, other->buf_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(israw_, other->israw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Img::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Img_descriptor_;
  metadata.reflection = Img_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectResult::kConfidenceFieldNumber;
const int DetectResult::kRectFieldNumber;
const int DetectResult::kFaceInfoFieldNumber;
#endif  // !_MSC_VER

DetectResult::DetectResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.DetectResult)
}

void DetectResult::InitAsDefaultInstance() {
  rect_ = const_cast< ::faapi::Rect*>(&::faapi::Rect::default_instance());
}

DetectResult::DetectResult(const DetectResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.DetectResult)
}

void DetectResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confidence_ = 0;
  rect_ = NULL;
  faceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectResult::~DetectResult() {
  // @@protoc_insertion_point(destructor:faapi.DetectResult)
  SharedDtor();
}

void DetectResult::SharedDtor() {
  if (faceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete faceinfo_;
  }
  if (this != default_instance_) {
    delete rect_;
  }
}

void DetectResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectResult_descriptor_;
}

const DetectResult& DetectResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

DetectResult* DetectResult::default_instance_ = NULL;

DetectResult* DetectResult::New() const {
  return new DetectResult;
}

void DetectResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    confidence_ = 0;
    if (has_rect()) {
      if (rect_ != NULL) rect_->::faapi::Rect::Clear();
    }
    if (has_faceinfo()) {
      if (faceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        faceinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.DetectResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float confidence = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rect;
        break;
      }

      // optional .faapi.Rect rect = 2;
      case 2: {
        if (tag == 18) {
         parse_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_faceInfo;
        break;
      }

      // optional bytes faceInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_faceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_faceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.DetectResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.DetectResult)
  return false;
#undef DO_
}

void DetectResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.DetectResult)
  // optional float confidence = 1;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // optional .faapi.Rect rect = 2;
  if (has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rect(), output);
  }

  // optional bytes faceInfo = 3;
  if (has_faceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->faceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.DetectResult)
}

::google::protobuf::uint8* DetectResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.DetectResult)
  // optional float confidence = 1;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // optional .faapi.Rect rect = 2;
  if (has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rect(), target);
  }

  // optional bytes faceInfo = 3;
  if (has_faceinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->faceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.DetectResult)
  return target;
}

int DetectResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float confidence = 1;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // optional .faapi.Rect rect = 2;
    if (has_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect());
    }

    // optional bytes faceInfo = 3;
    if (has_faceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->faceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectResult::MergeFrom(const DetectResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_rect()) {
      mutable_rect()->::faapi::Rect::MergeFrom(from.rect());
    }
    if (from.has_faceinfo()) {
      set_faceinfo(from.faceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectResult::CopyFrom(const DetectResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectResult::IsInitialized() const {

  return true;
}

void DetectResult::Swap(DetectResult* other) {
  if (other != this) {
    std::swap(confidence_, other->confidence_);
    std::swap(rect_, other->rect_);
    std::swap(faceinfo_, other->faceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectResult_descriptor_;
  metadata.reflection = DetectResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtractResult::kRectFieldNumber;
const int ExtractResult::kFeatureFieldNumber;
#endif  // !_MSC_VER

ExtractResult::ExtractResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.ExtractResult)
}

void ExtractResult::InitAsDefaultInstance() {
  rect_ = const_cast< ::faapi::Rect*>(&::faapi::Rect::default_instance());
}

ExtractResult::ExtractResult(const ExtractResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.ExtractResult)
}

void ExtractResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rect_ = NULL;
  feature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtractResult::~ExtractResult() {
  // @@protoc_insertion_point(destructor:faapi.ExtractResult)
  SharedDtor();
}

void ExtractResult::SharedDtor() {
  if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature_;
  }
  if (this != default_instance_) {
    delete rect_;
  }
}

void ExtractResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtractResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtractResult_descriptor_;
}

const ExtractResult& ExtractResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

ExtractResult* ExtractResult::default_instance_ = NULL;

ExtractResult* ExtractResult::New() const {
  return new ExtractResult;
}

void ExtractResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_rect()) {
      if (rect_ != NULL) rect_->::faapi::Rect::Clear();
    }
    if (has_feature()) {
      if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        feature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtractResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.ExtractResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .faapi.Rect rect = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_feature;
        break;
      }

      // optional bytes feature = 2;
      case 2: {
        if (tag == 18) {
         parse_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.ExtractResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.ExtractResult)
  return false;
#undef DO_
}

void ExtractResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.ExtractResult)
  // optional .faapi.Rect rect = 1;
  if (has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rect(), output);
  }

  // optional bytes feature = 2;
  if (has_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->feature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.ExtractResult)
}

::google::protobuf::uint8* ExtractResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.ExtractResult)
  // optional .faapi.Rect rect = 1;
  if (has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rect(), target);
  }

  // optional bytes feature = 2;
  if (has_feature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->feature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.ExtractResult)
  return target;
}

int ExtractResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .faapi.Rect rect = 1;
    if (has_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect());
    }

    // optional bytes feature = 2;
    if (has_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->feature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtractResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtractResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtractResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtractResult::MergeFrom(const ExtractResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rect()) {
      mutable_rect()->::faapi::Rect::MergeFrom(from.rect());
    }
    if (from.has_feature()) {
      set_feature(from.feature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtractResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtractResult::CopyFrom(const ExtractResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractResult::IsInitialized() const {

  return true;
}

void ExtractResult::Swap(ExtractResult* other) {
  if (other != this) {
    std::swap(rect_, other->rect_);
    std::swap(feature_, other->feature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtractResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtractResult_descriptor_;
  metadata.reflection = ExtractResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchResult::kFaceIDFieldNumber;
const int SearchResult::kScoreFieldNumber;
const int SearchResult::kTagNameFieldNumber;
#endif  // !_MSC_VER

SearchResult::SearchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.SearchResult)
}

void SearchResult::InitAsDefaultInstance() {
}

SearchResult::SearchResult(const SearchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.SearchResult)
}

void SearchResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  faceid_ = GOOGLE_ULONGLONG(0);
  score_ = 0;
  tagname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchResult::~SearchResult() {
  // @@protoc_insertion_point(destructor:faapi.SearchResult)
  SharedDtor();
}

void SearchResult::SharedDtor() {
  if (tagname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tagname_;
  }
  if (this != default_instance_) {
  }
}

void SearchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResult_descriptor_;
}

const SearchResult& SearchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

SearchResult* SearchResult::default_instance_ = NULL;

SearchResult* SearchResult::New() const {
  return new SearchResult;
}

void SearchResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    faceid_ = GOOGLE_ULONGLONG(0);
    score_ = 0;
    if (has_tagname()) {
      if (tagname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tagname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.SearchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 faceID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_score;
        break;
      }

      // optional float score = 2;
      case 2: {
        if (tag == 21) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tagName;
        break;
      }

      // optional string tagName = 3;
      case 3: {
        if (tag == 26) {
         parse_tagName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagname().data(), this->tagname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.SearchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.SearchResult)
  return false;
#undef DO_
}

void SearchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.SearchResult)
  // optional uint64 faceID = 1;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->faceid(), output);
  }

  // optional float score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // optional string tagName = 3;
  if (has_tagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tagname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.SearchResult)
}

::google::protobuf::uint8* SearchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.SearchResult)
  // optional uint64 faceID = 1;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->faceid(), target);
  }

  // optional float score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  // optional string tagName = 3;
  if (has_tagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tagname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.SearchResult)
  return target;
}

int SearchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 faceID = 1;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->faceid());
    }

    // optional float score = 2;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional string tagName = 3;
    if (has_tagname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchResult::MergeFrom(const SearchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_tagname()) {
      set_tagname(from.tagname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResult::CopyFrom(const SearchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResult::IsInitialized() const {

  return true;
}

void SearchResult::Swap(SearchResult* other) {
  if (other != this) {
    std::swap(faceid_, other->faceid_);
    std::swap(score_, other->score_);
    std::swap(tagname_, other->tagname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResult_descriptor_;
  metadata.reflection = SearchResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectReq::kImgFieldNumber;
#endif  // !_MSC_VER

DetectReq::DetectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.DetectReq)
}

void DetectReq::InitAsDefaultInstance() {
  img_ = const_cast< ::faapi::Img*>(&::faapi::Img::default_instance());
}

DetectReq::DetectReq(const DetectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.DetectReq)
}

void DetectReq::SharedCtor() {
  _cached_size_ = 0;
  img_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectReq::~DetectReq() {
  // @@protoc_insertion_point(destructor:faapi.DetectReq)
  SharedDtor();
}

void DetectReq::SharedDtor() {
  if (this != default_instance_) {
    delete img_;
  }
}

void DetectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectReq_descriptor_;
}

const DetectReq& DetectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

DetectReq* DetectReq::default_instance_ = NULL;

DetectReq* DetectReq::New() const {
  return new DetectReq;
}

void DetectReq::Clear() {
  if (has_img()) {
    if (img_ != NULL) img_->::faapi::Img::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.DetectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .faapi.Img img = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.DetectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.DetectReq)
  return false;
#undef DO_
}

void DetectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.DetectReq)
  // optional .faapi.Img img = 1;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->img(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.DetectReq)
}

::google::protobuf::uint8* DetectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.DetectReq)
  // optional .faapi.Img img = 1;
  if (has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->img(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.DetectReq)
  return target;
}

int DetectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .faapi.Img img = 1;
    if (has_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectReq::MergeFrom(const DetectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img()) {
      mutable_img()->::faapi::Img::MergeFrom(from.img());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectReq::CopyFrom(const DetectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectReq::IsInitialized() const {

  return true;
}

void DetectReq::Swap(DetectReq* other) {
  if (other != this) {
    std::swap(img_, other->img_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectReq_descriptor_;
  metadata.reflection = DetectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectResp::kResultsFieldNumber;
#endif  // !_MSC_VER

DetectResp::DetectResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.DetectResp)
}

void DetectResp::InitAsDefaultInstance() {
}

DetectResp::DetectResp(const DetectResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.DetectResp)
}

void DetectResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectResp::~DetectResp() {
  // @@protoc_insertion_point(destructor:faapi.DetectResp)
  SharedDtor();
}

void DetectResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectResp_descriptor_;
}

const DetectResp& DetectResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

DetectResp* DetectResp::default_instance_ = NULL;

DetectResp* DetectResp::New() const {
  return new DetectResp;
}

void DetectResp::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.DetectResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .faapi.DetectResult results = 1;
      case 1: {
        if (tag == 10) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_results;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.DetectResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.DetectResp)
  return false;
#undef DO_
}

void DetectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.DetectResp)
  // repeated .faapi.DetectResult results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.DetectResp)
}

::google::protobuf::uint8* DetectResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.DetectResp)
  // repeated .faapi.DetectResult results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.DetectResp)
  return target;
}

int DetectResp::ByteSize() const {
  int total_size = 0;

  // repeated .faapi.DetectResult results = 1;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectResp::MergeFrom(const DetectResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectResp::CopyFrom(const DetectResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectResp::IsInitialized() const {

  return true;
}

void DetectResp::Swap(DetectResp* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectResp_descriptor_;
  metadata.reflection = DetectResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtractReq::kImgFieldNumber;
const int ExtractReq::kFaceInfoFieldNumber;
#endif  // !_MSC_VER

ExtractReq::ExtractReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.ExtractReq)
}

void ExtractReq::InitAsDefaultInstance() {
  img_ = const_cast< ::faapi::Img*>(&::faapi::Img::default_instance());
}

ExtractReq::ExtractReq(const ExtractReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.ExtractReq)
}

void ExtractReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  img_ = NULL;
  faceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtractReq::~ExtractReq() {
  // @@protoc_insertion_point(destructor:faapi.ExtractReq)
  SharedDtor();
}

void ExtractReq::SharedDtor() {
  if (faceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete faceinfo_;
  }
  if (this != default_instance_) {
    delete img_;
  }
}

void ExtractReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtractReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtractReq_descriptor_;
}

const ExtractReq& ExtractReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

ExtractReq* ExtractReq::default_instance_ = NULL;

ExtractReq* ExtractReq::New() const {
  return new ExtractReq;
}

void ExtractReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_img()) {
      if (img_ != NULL) img_->::faapi::Img::Clear();
    }
    if (has_faceinfo()) {
      if (faceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        faceinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtractReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.ExtractReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .faapi.Img img = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_faceInfo;
        break;
      }

      // optional bytes faceInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_faceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_faceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.ExtractReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.ExtractReq)
  return false;
#undef DO_
}

void ExtractReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.ExtractReq)
  // optional .faapi.Img img = 1;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->img(), output);
  }

  // optional bytes faceInfo = 2;
  if (has_faceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->faceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.ExtractReq)
}

::google::protobuf::uint8* ExtractReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.ExtractReq)
  // optional .faapi.Img img = 1;
  if (has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->img(), target);
  }

  // optional bytes faceInfo = 2;
  if (has_faceinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->faceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.ExtractReq)
  return target;
}

int ExtractReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .faapi.Img img = 1;
    if (has_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img());
    }

    // optional bytes faceInfo = 2;
    if (has_faceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->faceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtractReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtractReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtractReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtractReq::MergeFrom(const ExtractReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img()) {
      mutable_img()->::faapi::Img::MergeFrom(from.img());
    }
    if (from.has_faceinfo()) {
      set_faceinfo(from.faceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtractReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtractReq::CopyFrom(const ExtractReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractReq::IsInitialized() const {

  return true;
}

void ExtractReq::Swap(ExtractReq* other) {
  if (other != this) {
    std::swap(img_, other->img_);
    std::swap(faceinfo_, other->faceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtractReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtractReq_descriptor_;
  metadata.reflection = ExtractReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtractResp::kResultFieldNumber;
#endif  // !_MSC_VER

ExtractResp::ExtractResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.ExtractResp)
}

void ExtractResp::InitAsDefaultInstance() {
  result_ = const_cast< ::faapi::ExtractResult*>(&::faapi::ExtractResult::default_instance());
}

ExtractResp::ExtractResp(const ExtractResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.ExtractResp)
}

void ExtractResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtractResp::~ExtractResp() {
  // @@protoc_insertion_point(destructor:faapi.ExtractResp)
  SharedDtor();
}

void ExtractResp::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ExtractResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtractResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtractResp_descriptor_;
}

const ExtractResp& ExtractResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

ExtractResp* ExtractResp::default_instance_ = NULL;

ExtractResp* ExtractResp::New() const {
  return new ExtractResp;
}

void ExtractResp::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::faapi::ExtractResult::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtractResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.ExtractResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .faapi.ExtractResult result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.ExtractResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.ExtractResp)
  return false;
#undef DO_
}

void ExtractResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.ExtractResp)
  // optional .faapi.ExtractResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.ExtractResp)
}

::google::protobuf::uint8* ExtractResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.ExtractResp)
  // optional .faapi.ExtractResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.ExtractResp)
  return target;
}

int ExtractResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .faapi.ExtractResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtractResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtractResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtractResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtractResp::MergeFrom(const ExtractResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::faapi::ExtractResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtractResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtractResp::CopyFrom(const ExtractResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractResp::IsInitialized() const {

  return true;
}

void ExtractResp::Swap(ExtractResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtractResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtractResp_descriptor_;
  metadata.reflection = ExtractResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompareReq::kFeature1FieldNumber;
const int CompareReq::kFeature2FieldNumber;
#endif  // !_MSC_VER

CompareReq::CompareReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.CompareReq)
}

void CompareReq::InitAsDefaultInstance() {
}

CompareReq::CompareReq(const CompareReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.CompareReq)
}

void CompareReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  feature1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feature2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompareReq::~CompareReq() {
  // @@protoc_insertion_point(destructor:faapi.CompareReq)
  SharedDtor();
}

void CompareReq::SharedDtor() {
  if (feature1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature1_;
  }
  if (feature2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature2_;
  }
  if (this != default_instance_) {
  }
}

void CompareReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompareReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompareReq_descriptor_;
}

const CompareReq& CompareReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

CompareReq* CompareReq::default_instance_ = NULL;

CompareReq* CompareReq::New() const {
  return new CompareReq;
}

void CompareReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_feature1()) {
      if (feature1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        feature1_->clear();
      }
    }
    if (has_feature2()) {
      if (feature2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        feature2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompareReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.CompareReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes feature1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_feature2;
        break;
      }

      // optional bytes feature2 = 2;
      case 2: {
        if (tag == 18) {
         parse_feature2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.CompareReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.CompareReq)
  return false;
#undef DO_
}

void CompareReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.CompareReq)
  // optional bytes feature1 = 1;
  if (has_feature1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->feature1(), output);
  }

  // optional bytes feature2 = 2;
  if (has_feature2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->feature2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.CompareReq)
}

::google::protobuf::uint8* CompareReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.CompareReq)
  // optional bytes feature1 = 1;
  if (has_feature1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->feature1(), target);
  }

  // optional bytes feature2 = 2;
  if (has_feature2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->feature2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.CompareReq)
  return target;
}

int CompareReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes feature1 = 1;
    if (has_feature1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->feature1());
    }

    // optional bytes feature2 = 2;
    if (has_feature2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->feature2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompareReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompareReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompareReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompareReq::MergeFrom(const CompareReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feature1()) {
      set_feature1(from.feature1());
    }
    if (from.has_feature2()) {
      set_feature2(from.feature2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompareReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompareReq::CopyFrom(const CompareReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareReq::IsInitialized() const {

  return true;
}

void CompareReq::Swap(CompareReq* other) {
  if (other != this) {
    std::swap(feature1_, other->feature1_);
    std::swap(feature2_, other->feature2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompareReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompareReq_descriptor_;
  metadata.reflection = CompareReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompareResp::kScoreFieldNumber;
#endif  // !_MSC_VER

CompareResp::CompareResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.CompareResp)
}

void CompareResp::InitAsDefaultInstance() {
}

CompareResp::CompareResp(const CompareResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.CompareResp)
}

void CompareResp::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompareResp::~CompareResp() {
  // @@protoc_insertion_point(destructor:faapi.CompareResp)
  SharedDtor();
}

void CompareResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompareResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompareResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompareResp_descriptor_;
}

const CompareResp& CompareResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

CompareResp* CompareResp::default_instance_ = NULL;

CompareResp* CompareResp::New() const {
  return new CompareResp;
}

void CompareResp::Clear() {
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompareResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.CompareResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float score = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.CompareResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.CompareResp)
  return false;
#undef DO_
}

void CompareResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.CompareResp)
  // optional float score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.CompareResp)
}

::google::protobuf::uint8* CompareResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.CompareResp)
  // optional float score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.CompareResp)
  return target;
}

int CompareResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float score = 1;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompareResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompareResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompareResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompareResp::MergeFrom(const CompareResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompareResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompareResp::CopyFrom(const CompareResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareResp::IsInitialized() const {

  return true;
}

void CompareResp::Swap(CompareResp* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompareResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompareResp_descriptor_;
  metadata.reflection = CompareResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertReq::kTagNameFieldNumber;
const int InsertReq::kFeatureFieldNumber;
#endif  // !_MSC_VER

InsertReq::InsertReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.InsertReq)
}

void InsertReq::InitAsDefaultInstance() {
}

InsertReq::InsertReq(const InsertReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.InsertReq)
}

void InsertReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tagname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertReq::~InsertReq() {
  // @@protoc_insertion_point(destructor:faapi.InsertReq)
  SharedDtor();
}

void InsertReq::SharedDtor() {
  if (tagname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tagname_;
  }
  if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature_;
  }
  if (this != default_instance_) {
  }
}

void InsertReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertReq_descriptor_;
}

const InsertReq& InsertReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

InsertReq* InsertReq::default_instance_ = NULL;

InsertReq* InsertReq::New() const {
  return new InsertReq;
}

void InsertReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_tagname()) {
      if (tagname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tagname_->clear();
      }
    }
    if (has_feature()) {
      if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        feature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.InsertReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tagName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagname().data(), this->tagname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_feature;
        break;
      }

      // optional bytes feature = 2;
      case 2: {
        if (tag == 18) {
         parse_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.InsertReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.InsertReq)
  return false;
#undef DO_
}

void InsertReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.InsertReq)
  // optional string tagName = 1;
  if (has_tagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tagname(), output);
  }

  // optional bytes feature = 2;
  if (has_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->feature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.InsertReq)
}

::google::protobuf::uint8* InsertReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.InsertReq)
  // optional string tagName = 1;
  if (has_tagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tagname(), target);
  }

  // optional bytes feature = 2;
  if (has_feature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->feature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.InsertReq)
  return target;
}

int InsertReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tagName = 1;
    if (has_tagname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagname());
    }

    // optional bytes feature = 2;
    if (has_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->feature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertReq::MergeFrom(const InsertReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tagname()) {
      set_tagname(from.tagname());
    }
    if (from.has_feature()) {
      set_feature(from.feature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertReq::CopyFrom(const InsertReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertReq::IsInitialized() const {

  return true;
}

void InsertReq::Swap(InsertReq* other) {
  if (other != this) {
    std::swap(tagname_, other->tagname_);
    std::swap(feature_, other->feature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertReq_descriptor_;
  metadata.reflection = InsertReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertResp::kFaceIDFieldNumber;
#endif  // !_MSC_VER

InsertResp::InsertResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.InsertResp)
}

void InsertResp::InitAsDefaultInstance() {
}

InsertResp::InsertResp(const InsertResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.InsertResp)
}

void InsertResp::SharedCtor() {
  _cached_size_ = 0;
  faceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertResp::~InsertResp() {
  // @@protoc_insertion_point(destructor:faapi.InsertResp)
  SharedDtor();
}

void InsertResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InsertResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertResp_descriptor_;
}

const InsertResp& InsertResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

InsertResp* InsertResp::default_instance_ = NULL;

InsertResp* InsertResp::New() const {
  return new InsertResp;
}

void InsertResp::Clear() {
  faceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.InsertResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 faceID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.InsertResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.InsertResp)
  return false;
#undef DO_
}

void InsertResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.InsertResp)
  // optional uint64 faceID = 1;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->faceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.InsertResp)
}

::google::protobuf::uint8* InsertResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.InsertResp)
  // optional uint64 faceID = 1;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->faceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.InsertResp)
  return target;
}

int InsertResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 faceID = 1;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->faceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertResp::MergeFrom(const InsertResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertResp::CopyFrom(const InsertResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertResp::IsInitialized() const {

  return true;
}

void InsertResp::Swap(InsertResp* other) {
  if (other != this) {
    std::swap(faceid_, other->faceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertResp_descriptor_;
  metadata.reflection = InsertResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteReq::kTagNameFieldNumber;
const int DeleteReq::kFaceIDFieldNumber;
#endif  // !_MSC_VER

DeleteReq::DeleteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.DeleteReq)
}

void DeleteReq::InitAsDefaultInstance() {
}

DeleteReq::DeleteReq(const DeleteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.DeleteReq)
}

void DeleteReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tagname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  faceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteReq::~DeleteReq() {
  // @@protoc_insertion_point(destructor:faapi.DeleteReq)
  SharedDtor();
}

void DeleteReq::SharedDtor() {
  if (tagname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tagname_;
  }
  if (this != default_instance_) {
  }
}

void DeleteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteReq_descriptor_;
}

const DeleteReq& DeleteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

DeleteReq* DeleteReq::default_instance_ = NULL;

DeleteReq* DeleteReq::New() const {
  return new DeleteReq;
}

void DeleteReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_tagname()) {
      if (tagname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tagname_->clear();
      }
    }
    faceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.DeleteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tagName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagname().data(), this->tagname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_faceID;
        break;
      }

      // optional uint64 faceID = 2;
      case 2: {
        if (tag == 16) {
         parse_faceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.DeleteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.DeleteReq)
  return false;
#undef DO_
}

void DeleteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.DeleteReq)
  // optional string tagName = 1;
  if (has_tagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tagname(), output);
  }

  // optional uint64 faceID = 2;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->faceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.DeleteReq)
}

::google::protobuf::uint8* DeleteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.DeleteReq)
  // optional string tagName = 1;
  if (has_tagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tagname(), target);
  }

  // optional uint64 faceID = 2;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->faceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.DeleteReq)
  return target;
}

int DeleteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tagName = 1;
    if (has_tagname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagname());
    }

    // optional uint64 faceID = 2;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->faceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteReq::MergeFrom(const DeleteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tagname()) {
      set_tagname(from.tagname());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteReq::CopyFrom(const DeleteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteReq::IsInitialized() const {

  return true;
}

void DeleteReq::Swap(DeleteReq* other) {
  if (other != this) {
    std::swap(tagname_, other->tagname_);
    std::swap(faceid_, other->faceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteReq_descriptor_;
  metadata.reflection = DeleteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchReq::kFeatureFieldNumber;
const int SearchReq::kTagNamesFieldNumber;
const int SearchReq::kMaxCountFieldNumber;
#endif  // !_MSC_VER

SearchReq::SearchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.SearchReq)
}

void SearchReq::InitAsDefaultInstance() {
}

SearchReq::SearchReq(const SearchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.SearchReq)
}

void SearchReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  feature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchReq::~SearchReq() {
  // @@protoc_insertion_point(destructor:faapi.SearchReq)
  SharedDtor();
}

void SearchReq::SharedDtor() {
  if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete feature_;
  }
  if (this != default_instance_) {
  }
}

void SearchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchReq_descriptor_;
}

const SearchReq& SearchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

SearchReq* SearchReq::default_instance_ = NULL;

SearchReq* SearchReq::New() const {
  return new SearchReq;
}

void SearchReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_feature()) {
      if (feature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        feature_->clear();
      }
    }
    maxcount_ = 0;
  }
  tagnames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.SearchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes feature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tagNames;
        break;
      }

      // repeated string tagNames = 2;
      case 2: {
        if (tag == 18) {
         parse_tagNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tagnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagnames(this->tagnames_size() - 1).data(),
            this->tagnames(this->tagnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagnames");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tagNames;
        if (input->ExpectTag(24)) goto parse_maxCount;
        break;
      }

      // optional int32 maxCount = 3;
      case 3: {
        if (tag == 24) {
         parse_maxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.SearchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.SearchReq)
  return false;
#undef DO_
}

void SearchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.SearchReq)
  // optional bytes feature = 1;
  if (has_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->feature(), output);
  }

  // repeated string tagNames = 2;
  for (int i = 0; i < this->tagnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tagnames(i).data(), this->tagnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tagnames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tagnames(i), output);
  }

  // optional int32 maxCount = 3;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.SearchReq)
}

::google::protobuf::uint8* SearchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.SearchReq)
  // optional bytes feature = 1;
  if (has_feature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->feature(), target);
  }

  // repeated string tagNames = 2;
  for (int i = 0; i < this->tagnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagnames(i).data(), this->tagnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagnames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tagnames(i), target);
  }

  // optional int32 maxCount = 3;
  if (has_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.SearchReq)
  return target;
}

int SearchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes feature = 1;
    if (has_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->feature());
    }

    // optional int32 maxCount = 3;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcount());
    }

  }
  // repeated string tagNames = 2;
  total_size += 1 * this->tagnames_size();
  for (int i = 0; i < this->tagnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tagnames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchReq::MergeFrom(const SearchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  tagnames_.MergeFrom(from.tagnames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feature()) {
      set_feature(from.feature());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReq::CopyFrom(const SearchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReq::IsInitialized() const {

  return true;
}

void SearchReq::Swap(SearchReq* other) {
  if (other != this) {
    std::swap(feature_, other->feature_);
    tagnames_.Swap(&other->tagnames_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchReq_descriptor_;
  metadata.reflection = SearchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchResp::kResultsFieldNumber;
#endif  // !_MSC_VER

SearchResp::SearchResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.SearchResp)
}

void SearchResp::InitAsDefaultInstance() {
}

SearchResp::SearchResp(const SearchResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.SearchResp)
}

void SearchResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchResp::~SearchResp() {
  // @@protoc_insertion_point(destructor:faapi.SearchResp)
  SharedDtor();
}

void SearchResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResp_descriptor_;
}

const SearchResp& SearchResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

SearchResp* SearchResp::default_instance_ = NULL;

SearchResp* SearchResp::New() const {
  return new SearchResp;
}

void SearchResp::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.SearchResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .faapi.SearchResult results = 1;
      case 1: {
        if (tag == 10) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_results;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.SearchResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.SearchResp)
  return false;
#undef DO_
}

void SearchResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.SearchResp)
  // repeated .faapi.SearchResult results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.SearchResp)
}

::google::protobuf::uint8* SearchResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.SearchResp)
  // repeated .faapi.SearchResult results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.SearchResp)
  return target;
}

int SearchResp::ByteSize() const {
  int total_size = 0;

  // repeated .faapi.SearchResult results = 1;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchResp::MergeFrom(const SearchResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResp::CopyFrom(const SearchResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResp::IsInitialized() const {

  return true;
}

void SearchResp::Swap(SearchResp* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResp_descriptor_;
  metadata.reflection = SearchResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListTagsResp::kTagNamesFieldNumber;
#endif  // !_MSC_VER

ListTagsResp::ListTagsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.ListTagsResp)
}

void ListTagsResp::InitAsDefaultInstance() {
}

ListTagsResp::ListTagsResp(const ListTagsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.ListTagsResp)
}

void ListTagsResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListTagsResp::~ListTagsResp() {
  // @@protoc_insertion_point(destructor:faapi.ListTagsResp)
  SharedDtor();
}

void ListTagsResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListTagsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTagsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTagsResp_descriptor_;
}

const ListTagsResp& ListTagsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

ListTagsResp* ListTagsResp::default_instance_ = NULL;

ListTagsResp* ListTagsResp::New() const {
  return new ListTagsResp;
}

void ListTagsResp::Clear() {
  tagnames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListTagsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.ListTagsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tagNames = 1;
      case 1: {
        if (tag == 10) {
         parse_tagNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tagnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagnames(this->tagnames_size() - 1).data(),
            this->tagnames(this->tagnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagnames");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tagNames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.ListTagsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.ListTagsResp)
  return false;
#undef DO_
}

void ListTagsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.ListTagsResp)
  // repeated string tagNames = 1;
  for (int i = 0; i < this->tagnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tagnames(i).data(), this->tagnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tagnames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tagnames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.ListTagsResp)
}

::google::protobuf::uint8* ListTagsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.ListTagsResp)
  // repeated string tagNames = 1;
  for (int i = 0; i < this->tagnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagnames(i).data(), this->tagnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagnames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->tagnames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.ListTagsResp)
  return target;
}

int ListTagsResp::ByteSize() const {
  int total_size = 0;

  // repeated string tagNames = 1;
  total_size += 1 * this->tagnames_size();
  for (int i = 0; i < this->tagnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tagnames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTagsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListTagsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListTagsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListTagsResp::MergeFrom(const ListTagsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tagnames_.MergeFrom(from.tagnames_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListTagsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTagsResp::CopyFrom(const ListTagsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTagsResp::IsInitialized() const {

  return true;
}

void ListTagsResp::Swap(ListTagsResp* other) {
  if (other != this) {
    tagnames_.Swap(&other->tagnames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListTagsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTagsResp_descriptor_;
  metadata.reflection = ListTagsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTagSizeReq::kTagNameFieldNumber;
#endif  // !_MSC_VER

GetTagSizeReq::GetTagSizeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.GetTagSizeReq)
}

void GetTagSizeReq::InitAsDefaultInstance() {
}

GetTagSizeReq::GetTagSizeReq(const GetTagSizeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.GetTagSizeReq)
}

void GetTagSizeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tagname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTagSizeReq::~GetTagSizeReq() {
  // @@protoc_insertion_point(destructor:faapi.GetTagSizeReq)
  SharedDtor();
}

void GetTagSizeReq::SharedDtor() {
  if (tagname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tagname_;
  }
  if (this != default_instance_) {
  }
}

void GetTagSizeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTagSizeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTagSizeReq_descriptor_;
}

const GetTagSizeReq& GetTagSizeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

GetTagSizeReq* GetTagSizeReq::default_instance_ = NULL;

GetTagSizeReq* GetTagSizeReq::New() const {
  return new GetTagSizeReq;
}

void GetTagSizeReq::Clear() {
  if (has_tagname()) {
    if (tagname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      tagname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTagSizeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.GetTagSizeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tagName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagname().data(), this->tagname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.GetTagSizeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.GetTagSizeReq)
  return false;
#undef DO_
}

void GetTagSizeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.GetTagSizeReq)
  // optional string tagName = 1;
  if (has_tagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tagname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.GetTagSizeReq)
}

::google::protobuf::uint8* GetTagSizeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.GetTagSizeReq)
  // optional string tagName = 1;
  if (has_tagname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tagname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.GetTagSizeReq)
  return target;
}

int GetTagSizeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tagName = 1;
    if (has_tagname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTagSizeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTagSizeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTagSizeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTagSizeReq::MergeFrom(const GetTagSizeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tagname()) {
      set_tagname(from.tagname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTagSizeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTagSizeReq::CopyFrom(const GetTagSizeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTagSizeReq::IsInitialized() const {

  return true;
}

void GetTagSizeReq::Swap(GetTagSizeReq* other) {
  if (other != this) {
    std::swap(tagname_, other->tagname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTagSizeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTagSizeReq_descriptor_;
  metadata.reflection = GetTagSizeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTagSizeResp::kSizeFieldNumber;
#endif  // !_MSC_VER

GetTagSizeResp::GetTagSizeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.GetTagSizeResp)
}

void GetTagSizeResp::InitAsDefaultInstance() {
}

GetTagSizeResp::GetTagSizeResp(const GetTagSizeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:faapi.GetTagSizeResp)
}

void GetTagSizeResp::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTagSizeResp::~GetTagSizeResp() {
  // @@protoc_insertion_point(destructor:faapi.GetTagSizeResp)
  SharedDtor();
}

void GetTagSizeResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTagSizeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTagSizeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTagSizeResp_descriptor_;
}

const GetTagSizeResp& GetTagSizeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_faapi_2eproto();
  return *default_instance_;
}

GetTagSizeResp* GetTagSizeResp::default_instance_ = NULL;

GetTagSizeResp* GetTagSizeResp::New() const {
  return new GetTagSizeResp;
}

void GetTagSizeResp::Clear() {
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTagSizeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.GetTagSizeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.GetTagSizeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.GetTagSizeResp)
  return false;
#undef DO_
}

void GetTagSizeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.GetTagSizeResp)
  // optional int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.GetTagSizeResp)
}

::google::protobuf::uint8* GetTagSizeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.GetTagSizeResp)
  // optional int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.GetTagSizeResp)
  return target;
}

int GetTagSizeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTagSizeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTagSizeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTagSizeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTagSizeResp::MergeFrom(const GetTagSizeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTagSizeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTagSizeResp::CopyFrom(const GetTagSizeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTagSizeResp::IsInitialized() const {

  return true;
}

void GetTagSizeResp::Swap(GetTagSizeResp* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTagSizeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTagSizeResp_descriptor_;
  metadata.reflection = GetTagSizeResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace faapi

// @@protoc_insertion_point(global_scope)
