/* ===================================================
 * Copyright (C) 2017 chenshuangping All Right Reserved.
 *      Author: mincore@163.com
 *    Filename: nyalg.cpp
 *     Created: 2017-06-24 08:33
 * Description:
 * ===================================================
 */
#include "nyalg.h"

#ifdef USE_FAKE_ALG
API void NYAlgInit()
{

}

API HNYALG NYAlgNew(const NYAlgConfig *cfg, int device)
{
    return (void*)1;
}

API void NYAlgDel(HNYALG)
{

}

API void NYAlgDetect(HNYALG, const cv::Mat &mat, std::vector<FaceInfo> &result, int miniSize, const float threshold[3])
{
    FaceInfo faceInfo = {0.0f, 0.0f, 100.0f, 100.0f, 0.0f};
    result.push_back(faceInfo);
}

API void NYAlgExtract(HNYALG, const cv::Mat &mat, const FaceInfo& faceInfo,
        std::vector<float> &feature)
{
    feature = {
        0.798490,-0.875245,-0.025316,-1.383293,1.080400,1.599128,-2.524648,0.595099,1.831298,-1.096637,-1.008430,-1.909511,0.426412,1.788977,0.925364,-1.995306,0.335584,0.269461,0.036460,-0.552526,-1.683349,0.157620,1.375169,0.234091,-1.519550,-1.231831,2.150849,-0.129641,-0.916079,1.536912,1.401484,1.732151,-0.819244,1.966628,0.574430,1.318420,0.373365,-1.701849,-1.515525,-0.602590,-0.233452,-0.753948,-0.918911,1.147855,-1.618907,1.324615,-0.133121,-0.465076,4.194165,-1.414786,2.044797,-2.710659,1.975932,-0.461508,0.426153,0.014369,1.382545,-1.181425,-1.332175,-1.225470,0.439583,0.339248,-1.961195,-0.448699,-1.024836,1.041755,-0.139040,-0.227337,-0.435995,-0.251477,2.554696,0.290386,-0.160833,-0.222594,0.371927,1.922343,1.016283,0.473109,-0.521568,-0.664800,-0.559927,4.669974,2.254839,3.016843,1.823199,-1.610413,0.374883,-1.266369,-1.075734,-0.611376,-1.888942,-0.106068,1.460257,2.087506,-0.090629,-0.260162,-0.864509,-0.322149,3.253218,-1.247166,0.543180,1.311555,1.749823,0.934804,-1.853698,0.713615,0.545216,0.148988,0.305639,0.745654,-0.057891,1.626533,-1.473363,0.901842,0.483451,0.153358,-1.429675,-0.636235,-2.326841,-0.345875,0.096754,1.534102,-2.631332,0.231433,0.131034,2.406999,-0.745974,1.082279,-0.904231,0.976520,1.625548,-0.871502,0.381309,0.687039,-1.298299,0.940503,0.236071,1.879443,0.493633,-0.251966,0.093778,0.140399,0.421000,0.655621,1.923449,-1.636923,0.645540,-0.914992,0.670577,1.004036,0.011054,-0.395186,0.909342,0.183783,-2.195583,-1.384370,-0.272600,2.627514,-0.346070,1.766495,-0.379950,-1.018967,1.276394,-1.268565,-0.174195,1.000317,-0.148691,-0.734439,0.585469,-0.870953,-1.373816,0.780708,0.682398,-0.392276,-0.737388,-1.202874,1.987415,-0.639425,0.058308,2.962140,-1.865410,0.454393,0.480388,-1.574595,-1.419938,-1.168259,-2.099405,0.162237,2.132304,0.080094,-0.190954,-1.770912,0.689486,0.139229,-1.293688,-1.045612,1.434637,-1.171226,-0.254632,-2.144557,-1.935069,-1.470271,-1.681507,-1.154642,0.820467,1.449029,0.212222,1.461934,-0.226565,-0.848525,0.848607,0.777857,2.360379,0.532849,0.453970,3.627276,-0.036997,-0.328444,1.797994,1.428895,-0.103878,-1.119783,1.481999,-0.665477,1.208088,-1.801714,0.713918,1.202718,-0.047302,-0.679781,-0.694167,-1.436407,-3.194215,0.699555,0.296433,-0.822437,-0.084700,-1.900156,-1.891290,1.057657,-0.116911,2.652241,-0.229909,2.747475,-0.318354,-0.879825,0.542491,1.510712,-2.197489,-0.718141,1.368630,-1.806938,-1.422915,2.050045,-2.610924,-0.871676,-0.333418,-0.893771,2.188691,-1.468399,-1.947547,0.673653,1.470670,-0.748713,-1.347253,-0.578527,-1.177261,1.726733,-0.491830,-1.757005,0.408708,-2.057060,0.034678,1.364295,0.623574,-1.094411,-0.658268,1.467407,-0.963844,2.022584,1.876025,0.894993,-2.596950,-0.550860,0.345907,0.325979,-1.455439,-0.890080,0.428901,0.974962,-2.143656,-0.388936,-1.140162,-0.578079,-1.001456,-0.152036,-1.124528,1.912454,-1.440954,1.200896,0.342488,1.362605,-0.404791,0.693828,2.449121,-1.200533,0.615869,0.412951,1.268730,2.526599,-0.422484,1.486174,-0.626054,0.837561,0.796632,-1.863105,1.573617,2.132184,0.685997,-0.398135,
    };
}

API float NYAlgCompare(HNYALG, const float*, const float*)
{
    return 0.4f;
}

API float NYAlgGetQuality(HNYALG h, const cv::Mat &mat)
{
    return 0.0f;
}

#endif
